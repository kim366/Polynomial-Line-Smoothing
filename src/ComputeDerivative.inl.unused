template<unsigned Order, typename ParamT, int DerivativeOrder = 1>
Polynomial<Order - DerivativeOrder, ParamT>
    compute_derivative(const Polynomial<Order, ParamT>& polyn_)
{
    using DerivedPolynT = Polynomial<Order - 1, ParamT>;

    typename DerivedPolynT::ParamArrT derived_params;

    for (unsigned param_idx = 0; param_idx < Order; ++param_idx)
        derived_params[param_idx] =
            static_cast<float>(Order - param_idx) * polyn_.getParam(param_idx);

    const DerivedPolynT derived_polyn{derived_params};
    return compute_derivative<Order, ParamT, DerivativeOrder - 1>(
        derived_polyn);
}

template<unsigned Order, typename ParamT>
Polynomial<Order, ParamT> compute_derivative<Order, ParamT, 0>(
    const Polynomial<Order, ParamT>& polyn_)
{
    return polyn_;
}
